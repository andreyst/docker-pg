input {
  file {
    path => "/var/log/test.log"

    type => "lsf"
  }

  lumberjack {
    # The port to listen on
    port => 57840

    # The paths to your ssl cert and key
    ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
    ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
  }
}

filter {

  if [type] == "helloworld" {

    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} \[(?<severity>[^\]]+)\] %{GREEDYDATA:msg} -- (?<json>\{.*\})" }
    }

    if !("_grokparsefailure" in [tags]) {

      date {
        locale => "en"
        match => [ "log_timestamp", "ISO8601" ]
#        target => "@timestamp"
      }

#      mutate {
#        replace => ["@timestamp", "%{log_timestamp}"]
#      }

      json {
        source => "json"
        target => "data"
      }

      if !("_jsonparsefailure" in [tags]) {
        mutate {
          remove_field => [ "json" ]
        }
      }

      mutate {
        replace => [ "message", "%{msg}" ]
        remove_field => [ "msg" ]
      }
#    } else {
      # TODO: should research and add some tag or field that
      # will route these messages somewhere to monitor them
    }

    if ![severity] {
      mutate {
        add_field => [ "severity", "fatal" ]
      }
    }

#    if ![log_timestamp] {
#    }

  }

#  if [type] == "syslog" {
#    grok {
#      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
#      add_field => [ "received_at", "%{@timestamp}" ]
#      add_field => [ "received_from", "%{host}" ]
#    }
#    syslog_pri { }
#    date {
#      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
#    }
#    if !("_grokparsefailure" in [tags]) {
#      mutate {
#        replace => [ "@source_host", "%{syslog_hostname}" ]
#        replace => [ "@message", "%{syslog_message}" ]
#      }
#    }
#    mutate {
#      remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
#    }
#  }
}

output {
  elasticsearch {
    host => "#ELASTICSEARCH_SERVER_HOST#"
    port => "#ELASTICSEARCH_SERVER_PORT#"
    protocol => "http"
  }
  stdout { codec => rubydebug }
}